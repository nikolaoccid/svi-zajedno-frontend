/* tslint:disable */
/* eslint-disable */
/**
 * Activity Tracker backend
 * Backend application for Activity Tracker
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'activityName': string;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'activityPrice': number;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'activityStatus': ActivityActivityStatusEnum;
    /**
     * 
     * @type {ProjectAssociate}
     * @memberof Activity
     */
    'projectAssociate': ProjectAssociate;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'projectAssociateId': number;
    /**
     * 
     * @type {Array<StudentOnActivity>}
     * @memberof Activity
     */
    'studentOnActivity': Array<StudentOnActivity>;
    /**
     * 
     * @type {SchoolYear}
     * @memberof Activity
     */
    'schoolYear': SchoolYear;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'schoolYearId': number;
}

export const ActivityActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type ActivityActivityStatusEnum = typeof ActivityActivityStatusEnum[keyof typeof ActivityActivityStatusEnum];

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'categoryName': string;
    /**
     * 
     * @type {Array<ProjectAssociate>}
     * @memberof Category
     */
    'projectAssociate': Array<ProjectAssociate>;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'categoryName': string;
}
/**
 * 
 * @export
 * @interface CreateActivityDto
 */
export interface CreateActivityDto {
    /**
     * 
     * @type {string}
     * @memberof CreateActivityDto
     */
    'activityName': string;
    /**
     * 
     * @type {number}
     * @memberof CreateActivityDto
     */
    'activityPrice': number;
    /**
     * 
     * @type {string}
     * @memberof CreateActivityDto
     */
    'activityStatus': CreateActivityDtoActivityStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateActivityDto
     */
    'projectAssociateId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateActivityDto
     */
    'schoolYearId': number;
}

export const CreateActivityDtoActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type CreateActivityDtoActivityStatusEnum = typeof CreateActivityDtoActivityStatusEnum[keyof typeof CreateActivityDtoActivityStatusEnum];

/**
 * 
 * @export
 * @interface CreateProjectAssociateDto
 */
export interface CreateProjectAssociateDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'clubName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'mobilePhone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'contactPerson': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectAssociateDto
     */
    'projectAssociateStatus': CreateProjectAssociateDtoProjectAssociateStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectAssociateDto
     */
    'categoryId': number;
}

export const CreateProjectAssociateDtoProjectAssociateStatusEnum = {
    Active: 'active',
    Pending: 'pending',
    Inactive: 'inactive'
} as const;

export type CreateProjectAssociateDtoProjectAssociateStatusEnum = typeof CreateProjectAssociateDtoProjectAssociateStatusEnum[keyof typeof CreateProjectAssociateDtoProjectAssociateStatusEnum];

/**
 * 
 * @export
 * @interface CreateProjectUserDto
 */
export interface CreateProjectUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'oib': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'gender': CreateProjectUserDtoGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'guardianName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'guardianSurname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'childName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'childSurname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'mobilePhone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectUserDto
     */
    'email': string;
}

export const CreateProjectUserDtoGenderEnum = {
    Male: 'male',
    Female: 'female'
} as const;

export type CreateProjectUserDtoGenderEnum = typeof CreateProjectUserDtoGenderEnum[keyof typeof CreateProjectUserDtoGenderEnum];

/**
 * 
 * @export
 * @interface CreateStudentOnActivityDto
 */
export interface CreateStudentOnActivityDto {
    /**
     * 
     * @type {number}
     * @memberof CreateStudentOnActivityDto
     */
    'activityId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateStudentOnActivityDto
     */
    'studentOnSchoolYearId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentOnActivityDto
     */
    'activityStatus': CreateStudentOnActivityDtoActivityStatusEnum;
}

export const CreateStudentOnActivityDtoActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type CreateStudentOnActivityDtoActivityStatusEnum = typeof CreateStudentOnActivityDtoActivityStatusEnum[keyof typeof CreateStudentOnActivityDtoActivityStatusEnum];

/**
 * 
 * @export
 * @interface CreateStudentOnSchoolYearDto
 */
export interface CreateStudentOnSchoolYearDto {
    /**
     * 
     * @type {number}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'schoolYearId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'status': CreateStudentOnSchoolYearDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'sourceSystem': CreateStudentOnSchoolYearDtoSourceSystemEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'protectionType': CreateStudentOnSchoolYearDtoProtectionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentOnSchoolYearDto
     */
    'dateOfEnrollment': string;
}

export const CreateStudentOnSchoolYearDtoStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type CreateStudentOnSchoolYearDtoStatusEnum = typeof CreateStudentOnSchoolYearDtoStatusEnum[keyof typeof CreateStudentOnSchoolYearDtoStatusEnum];
export const CreateStudentOnSchoolYearDtoSourceSystemEnum = {
    Czss: 'czss',
    Obiteljskicentar: 'obiteljskicentar'
} as const;

export type CreateStudentOnSchoolYearDtoSourceSystemEnum = typeof CreateStudentOnSchoolYearDtoSourceSystemEnum[keyof typeof CreateStudentOnSchoolYearDtoSourceSystemEnum];
export const CreateStudentOnSchoolYearDtoProtectionTypeEnum = {
    Zmn: 'zmn',
    Preporuka: 'preporuka',
    Udomiteljstvo: 'udomiteljstvo'
} as const;

export type CreateStudentOnSchoolYearDtoProtectionTypeEnum = typeof CreateStudentOnSchoolYearDtoProtectionTypeEnum[keyof typeof CreateStudentOnSchoolYearDtoProtectionTypeEnum];

/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ProjectAssociate
 */
export interface ProjectAssociate {
    /**
     * 
     * @type {number}
     * @memberof ProjectAssociate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'clubName': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'mobilePhone': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'contactPerson': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectAssociate
     */
    'projectAssociateStatus': ProjectAssociateProjectAssociateStatusEnum;
    /**
     * 
     * @type {Category}
     * @memberof ProjectAssociate
     */
    'category': Category;
    /**
     * 
     * @type {number}
     * @memberof ProjectAssociate
     */
    'categoryId': number;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof ProjectAssociate
     */
    'activity': Array<Activity>;
}

export const ProjectAssociateProjectAssociateStatusEnum = {
    Active: 'active',
    Pending: 'pending',
    Inactive: 'inactive'
} as const;

export type ProjectAssociateProjectAssociateStatusEnum = typeof ProjectAssociateProjectAssociateStatusEnum[keyof typeof ProjectAssociateProjectAssociateStatusEnum];

/**
 * 
 * @export
 * @interface ProjectUser
 */
export interface ProjectUser {
    /**
     * 
     * @type {number}
     * @memberof ProjectUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'oib': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'gender': ProjectUserGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'guardianName': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'guardianSurname': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'childName': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'childSurname': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'mobilePhone': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUser
     */
    'email': string;
    /**
     * 
     * @type {Array<StudentOnSchoolYear>}
     * @memberof ProjectUser
     */
    'studentOnSchoolYear': Array<StudentOnSchoolYear>;
}

export const ProjectUserGenderEnum = {
    Male: 'male',
    Female: 'female'
} as const;

export type ProjectUserGenderEnum = typeof ProjectUserGenderEnum[keyof typeof ProjectUserGenderEnum];

/**
 * 
 * @export
 * @interface SchoolYear
 */
export interface SchoolYear {
    /**
     * 
     * @type {number}
     * @memberof SchoolYear
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof SchoolYear
     */
    'startYear': number;
    /**
     * 
     * @type {number}
     * @memberof SchoolYear
     */
    'endYear': number;
    /**
     * 
     * @type {Array<StudentOnSchoolYear>}
     * @memberof SchoolYear
     */
    'studentOnSchoolYear': Array<StudentOnSchoolYear>;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof SchoolYear
     */
    'activity': Array<Activity>;
}
/**
 * 
 * @export
 * @interface SchoolYearDto
 */
export interface SchoolYearDto {
    /**
     * 
     * @type {number}
     * @memberof SchoolYearDto
     */
    'startYear': number;
    /**
     * 
     * @type {number}
     * @memberof SchoolYearDto
     */
    'endYear': number;
}
/**
 * 
 * @export
 * @interface StudentOnActivity
 */
export interface StudentOnActivity {
    /**
     * 
     * @type {number}
     * @memberof StudentOnActivity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StudentOnActivity
     */
    'activityStatus': StudentOnActivityActivityStatusEnum;
    /**
     * 
     * @type {StudentOnSchoolYear}
     * @memberof StudentOnActivity
     */
    'studentOnSchoolYear': StudentOnSchoolYear;
    /**
     * 
     * @type {number}
     * @memberof StudentOnActivity
     */
    'studentOnSchoolYearId': number;
    /**
     * 
     * @type {string}
     * @memberof StudentOnActivity
     */
    'createdAt': string;
    /**
     * 
     * @type {Activity}
     * @memberof StudentOnActivity
     */
    'activity': Activity;
    /**
     * 
     * @type {number}
     * @memberof StudentOnActivity
     */
    'activityId': number;
}

export const StudentOnActivityActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type StudentOnActivityActivityStatusEnum = typeof StudentOnActivityActivityStatusEnum[keyof typeof StudentOnActivityActivityStatusEnum];

/**
 * 
 * @export
 * @interface StudentOnSchoolYear
 */
export interface StudentOnSchoolYear {
    /**
     * 
     * @type {number}
     * @memberof StudentOnSchoolYear
     */
    'id': number;
    /**
     * 
     * @type {ProjectUser}
     * @memberof StudentOnSchoolYear
     */
    'user': ProjectUser;
    /**
     * 
     * @type {number}
     * @memberof StudentOnSchoolYear
     */
    'userId': number;
    /**
     * 
     * @type {SchoolYear}
     * @memberof StudentOnSchoolYear
     */
    'schoolYear': SchoolYear;
    /**
     * 
     * @type {number}
     * @memberof StudentOnSchoolYear
     */
    'schoolYearId': number;
    /**
     * 
     * @type {string}
     * @memberof StudentOnSchoolYear
     */
    'status': StudentOnSchoolYearStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof StudentOnSchoolYear
     */
    'sourceSystem': StudentOnSchoolYearSourceSystemEnum;
    /**
     * 
     * @type {string}
     * @memberof StudentOnSchoolYear
     */
    'protectionType': StudentOnSchoolYearProtectionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StudentOnSchoolYear
     */
    'dateOfEnrollment': string;
    /**
     * 
     * @type {Array<StudentOnActivity>}
     * @memberof StudentOnSchoolYear
     */
    'studentOnActivity': Array<StudentOnActivity>;
}

export const StudentOnSchoolYearStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type StudentOnSchoolYearStatusEnum = typeof StudentOnSchoolYearStatusEnum[keyof typeof StudentOnSchoolYearStatusEnum];
export const StudentOnSchoolYearSourceSystemEnum = {
    Czss: 'czss',
    Obiteljskicentar: 'obiteljskicentar'
} as const;

export type StudentOnSchoolYearSourceSystemEnum = typeof StudentOnSchoolYearSourceSystemEnum[keyof typeof StudentOnSchoolYearSourceSystemEnum];
export const StudentOnSchoolYearProtectionTypeEnum = {
    Zmn: 'zmn',
    Preporuka: 'preporuka',
    Udomiteljstvo: 'udomiteljstvo'
} as const;

export type StudentOnSchoolYearProtectionTypeEnum = typeof StudentOnSchoolYearProtectionTypeEnum[keyof typeof StudentOnSchoolYearProtectionTypeEnum];

/**
 * 
 * @export
 * @interface UpdateActivityDto
 */
export interface UpdateActivityDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateActivityDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateActivityDto
     */
    'activityName'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateActivityDto
     */
    'activityPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateActivityDto
     */
    'activityStatus'?: UpdateActivityDtoActivityStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateActivityDto
     */
    'projectAssociateId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateActivityDto
     */
    'schoolYearId'?: number;
}

export const UpdateActivityDtoActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type UpdateActivityDtoActivityStatusEnum = typeof UpdateActivityDtoActivityStatusEnum[keyof typeof UpdateActivityDtoActivityStatusEnum];

/**
 * 
 * @export
 * @interface UpdateProjectAssociateDto
 */
export interface UpdateProjectAssociateDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectAssociateDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'clubName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'mobilePhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'contactPerson'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectAssociateDto
     */
    'projectAssociateStatus'?: UpdateProjectAssociateDtoProjectAssociateStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectAssociateDto
     */
    'categoryId'?: number;
}

export const UpdateProjectAssociateDtoProjectAssociateStatusEnum = {
    Active: 'active',
    Pending: 'pending',
    Inactive: 'inactive'
} as const;

export type UpdateProjectAssociateDtoProjectAssociateStatusEnum = typeof UpdateProjectAssociateDtoProjectAssociateStatusEnum[keyof typeof UpdateProjectAssociateDtoProjectAssociateStatusEnum];

/**
 * 
 * @export
 * @interface UpdateProjectUserDto
 */
export interface UpdateProjectUserDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectUserDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'oib': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'guardianName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'guardianSurname': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'childName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'childSurname': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'mobilePhone': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectUserDto
     */
    'gender'?: UpdateProjectUserDtoGenderEnum;
}

export const UpdateProjectUserDtoGenderEnum = {
    Male: 'male',
    Female: 'female'
} as const;

export type UpdateProjectUserDtoGenderEnum = typeof UpdateProjectUserDtoGenderEnum[keyof typeof UpdateProjectUserDtoGenderEnum];

/**
 * 
 * @export
 * @interface UpdateStudentOnActivityDto
 */
export interface UpdateStudentOnActivityDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnActivityDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnActivityDto
     */
    'activityId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnActivityDto
     */
    'studentOnSchoolYearId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentOnActivityDto
     */
    'activityStatus'?: UpdateStudentOnActivityDtoActivityStatusEnum;
}

export const UpdateStudentOnActivityDtoActivityStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type UpdateStudentOnActivityDtoActivityStatusEnum = typeof UpdateStudentOnActivityDtoActivityStatusEnum[keyof typeof UpdateStudentOnActivityDtoActivityStatusEnum];

/**
 * 
 * @export
 * @interface UpdateStudentOnSchoolYearDto
 */
export interface UpdateStudentOnSchoolYearDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'schoolYearId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'status'?: UpdateStudentOnSchoolYearDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'sourceSystem'?: UpdateStudentOnSchoolYearDtoSourceSystemEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'protectionType'?: UpdateStudentOnSchoolYearDtoProtectionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentOnSchoolYearDto
     */
    'dateOfEnrollment'?: string;
}

export const UpdateStudentOnSchoolYearDtoStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending'
} as const;

export type UpdateStudentOnSchoolYearDtoStatusEnum = typeof UpdateStudentOnSchoolYearDtoStatusEnum[keyof typeof UpdateStudentOnSchoolYearDtoStatusEnum];
export const UpdateStudentOnSchoolYearDtoSourceSystemEnum = {
    Czss: 'czss',
    Obiteljskicentar: 'obiteljskicentar'
} as const;

export type UpdateStudentOnSchoolYearDtoSourceSystemEnum = typeof UpdateStudentOnSchoolYearDtoSourceSystemEnum[keyof typeof UpdateStudentOnSchoolYearDtoSourceSystemEnum];
export const UpdateStudentOnSchoolYearDtoProtectionTypeEnum = {
    Zmn: 'zmn',
    Preporuka: 'preporuka',
    Udomiteljstvo: 'udomiteljstvo'
} as const;

export type UpdateStudentOnSchoolYearDtoProtectionTypeEnum = typeof UpdateStudentOnSchoolYearDtoProtectionTypeEnum[keyof typeof UpdateStudentOnSchoolYearDtoProtectionTypeEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role': UserRoleEnum;
}

export const UserRoleEnum = {
    Admin: 'admin',
    StandardUser: 'standard-user'
} as const;

export type UserRoleEnum = typeof UserRoleEnum[keyof typeof UserRoleEnum];


/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateActivityDto} createActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerCreate: async (createActivityDto: CreateActivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createActivityDto' is not null or undefined
            assertParamExists('activityControllerCreate', 'createActivityDto', createActivityDto)
            const localVarPath = `/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createActivityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'active' | 'inactive' | 'pending'} [activityStatus] 
         * @param {string} [query] 
         * @param {number} [studentOnSchoolYearId] 
         * @param {number} [schoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerFindAll: async (activityStatus?: 'active' | 'inactive' | 'pending', query?: string, studentOnSchoolYearId?: number, schoolYearId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (activityStatus !== undefined) {
                localVarQueryParameter['activityStatus'] = activityStatus;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (studentOnSchoolYearId !== undefined) {
                localVarQueryParameter['studentOnSchoolYearId'] = studentOnSchoolYearId;
            }

            if (schoolYearId !== undefined) {
                localVarQueryParameter['schoolYearId'] = schoolYearId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activityControllerFindOne', 'id', id)
            const localVarPath = `/activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activityControllerRemove', 'id', id)
            const localVarPath = `/activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateActivityDto} updateActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerUpdate: async (id: string, updateActivityDto: UpdateActivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activityControllerUpdate', 'id', id)
            // verify required parameter 'updateActivityDto' is not null or undefined
            assertParamExists('activityControllerUpdate', 'updateActivityDto', updateActivityDto)
            const localVarPath = `/activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateActivityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateActivityDto} createActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerCreate(createActivityDto: CreateActivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityControllerCreate(createActivityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'active' | 'inactive' | 'pending'} [activityStatus] 
         * @param {string} [query] 
         * @param {number} [studentOnSchoolYearId] 
         * @param {number} [schoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerFindAll(activityStatus?: 'active' | 'inactive' | 'pending', query?: string, studentOnSchoolYearId?: number, schoolYearId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityControllerFindAll(activityStatus, query, studentOnSchoolYearId, schoolYearId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateActivityDto} updateActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityControllerUpdate(id: string, updateActivityDto: UpdateActivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activityControllerUpdate(id, updateActivityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivityApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateActivityDto} createActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerCreate(createActivityDto: CreateActivityDto, options?: any): AxiosPromise<Activity> {
            return localVarFp.activityControllerCreate(createActivityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'active' | 'inactive' | 'pending'} [activityStatus] 
         * @param {string} [query] 
         * @param {number} [studentOnSchoolYearId] 
         * @param {number} [schoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerFindAll(activityStatus?: 'active' | 'inactive' | 'pending', query?: string, studentOnSchoolYearId?: number, schoolYearId?: number, options?: any): AxiosPromise<Array<Activity>> {
            return localVarFp.activityControllerFindAll(activityStatus, query, studentOnSchoolYearId, schoolYearId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerFindOne(id: string, options?: any): AxiosPromise<Activity> {
            return localVarFp.activityControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerRemove(id: string, options?: any): AxiosPromise<Activity> {
            return localVarFp.activityControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateActivityDto} updateActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityControllerUpdate(id: string, updateActivityDto: UpdateActivityDto, options?: any): AxiosPromise<Activity> {
            return localVarFp.activityControllerUpdate(id, updateActivityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @param {CreateActivityDto} createActivityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityControllerCreate(createActivityDto: CreateActivityDto, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).activityControllerCreate(createActivityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'active' | 'inactive' | 'pending'} [activityStatus] 
     * @param {string} [query] 
     * @param {number} [studentOnSchoolYearId] 
     * @param {number} [schoolYearId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityControllerFindAll(activityStatus?: 'active' | 'inactive' | 'pending', query?: string, studentOnSchoolYearId?: number, schoolYearId?: number, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).activityControllerFindAll(activityStatus, query, studentOnSchoolYearId, schoolYearId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).activityControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityControllerRemove(id: string, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).activityControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateActivityDto} updateActivityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityControllerUpdate(id: string, updateActivityDto: UpdateActivityDto, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).activityControllerUpdate(id, updateActivityDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginJwt: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLoginJwt', 'loginDto', loginDto)
            const localVarPath = `/auth/login/jwt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLoginJwt(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLoginJwt(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginJwt(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerLoginJwt(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLoginJwt(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLoginJwt(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate: async (categoryDto: CategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryDto' is not null or undefined
            assertParamExists('categoryControllerCreate', 'categoryDto', categoryDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll: async (limit?: number, page?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerFindOne', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerGetAllCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerRemove', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate: async (id: string, categoryDto: CategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'id', id)
            // verify required parameter 'categoryDto' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'categoryDto', categoryDto)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerCreate(categoryDto: CategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerCreate(categoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindAll(limit, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerGetAllCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerGetAllCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerUpdate(id: string, categoryDto: CategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerUpdate(id, categoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate(categoryDto: CategoryDto, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerCreate(categoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll(limit?: number, page?: number, query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerFindAll(limit, page, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne(id: string, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerGetAllCategories(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.categoryControllerGetAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerRemove(id: string, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate(id: string, categoryDto: CategoryDto, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerUpdate(id, categoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {CategoryDto} categoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerCreate(categoryDto: CategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerCreate(categoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindAll(limit, page, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerGetAllCategories(options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerGetAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerRemove(id: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CategoryDto} categoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerUpdate(id: string, categoryDto: CategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerUpdate(id, categoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExportApi - axios parameter creator
 * @export
 */
export const ExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportControllerProjectUsersExport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/project-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportApi - functional programming interface
 * @export
 */
export const ExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportControllerProjectUsersExport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportControllerProjectUsersExport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportApi - factory interface
 * @export
 */
export const ExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportControllerProjectUsersExport(options?: any): AxiosPromise<void> {
            return localVarFp.exportControllerProjectUsersExport(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportApi - object-oriented interface
 * @export
 * @class ExportApi
 * @extends {BaseAPI}
 */
export class ExportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApi
     */
    public exportControllerProjectUsersExport(options?: AxiosRequestConfig) {
        return ExportApiFp(this.configuration).exportControllerProjectUsersExport(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectAssociateApi - axios parameter creator
 * @export
 */
export const ProjectAssociateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectAssociateDto} createProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerCreate: async (createProjectAssociateDto: CreateProjectAssociateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectAssociateDto' is not null or undefined
            assertParamExists('projectAssociateControllerCreate', 'createProjectAssociateDto', createProjectAssociateDto)
            const localVarPath = `/project-associate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectAssociateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerFindAll: async (limit?: number, page?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project-associate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectAssociateControllerFindOne', 'id', id)
            const localVarPath = `/project-associate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectAssociateControllerRemove', 'id', id)
            const localVarPath = `/project-associate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectAssociateDto} updateProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerUpdate: async (id: string, updateProjectAssociateDto: UpdateProjectAssociateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectAssociateControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectAssociateDto' is not null or undefined
            assertParamExists('projectAssociateControllerUpdate', 'updateProjectAssociateDto', updateProjectAssociateDto)
            const localVarPath = `/project-associate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectAssociateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectAssociateApi - functional programming interface
 * @export
 */
export const ProjectAssociateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectAssociateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectAssociateDto} createProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectAssociateControllerCreate(createProjectAssociateDto: CreateProjectAssociateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAssociate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectAssociateControllerCreate(createProjectAssociateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectAssociateControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectAssociateControllerFindAll(limit, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectAssociateControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAssociate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectAssociateControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectAssociateControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAssociate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectAssociateControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectAssociateDto} updateProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectAssociateControllerUpdate(id: string, updateProjectAssociateDto: UpdateProjectAssociateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAssociate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectAssociateControllerUpdate(id, updateProjectAssociateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectAssociateApi - factory interface
 * @export
 */
export const ProjectAssociateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectAssociateApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectAssociateDto} createProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerCreate(createProjectAssociateDto: CreateProjectAssociateDto, options?: any): AxiosPromise<ProjectAssociate> {
            return localVarFp.projectAssociateControllerCreate(createProjectAssociateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerFindAll(limit?: number, page?: number, query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.projectAssociateControllerFindAll(limit, page, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerFindOne(id: string, options?: any): AxiosPromise<ProjectAssociate> {
            return localVarFp.projectAssociateControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerRemove(id: string, options?: any): AxiosPromise<ProjectAssociate> {
            return localVarFp.projectAssociateControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectAssociateDto} updateProjectAssociateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectAssociateControllerUpdate(id: string, updateProjectAssociateDto: UpdateProjectAssociateDto, options?: any): AxiosPromise<ProjectAssociate> {
            return localVarFp.projectAssociateControllerUpdate(id, updateProjectAssociateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectAssociateApi - object-oriented interface
 * @export
 * @class ProjectAssociateApi
 * @extends {BaseAPI}
 */
export class ProjectAssociateApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectAssociateDto} createProjectAssociateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAssociateApi
     */
    public projectAssociateControllerCreate(createProjectAssociateDto: CreateProjectAssociateDto, options?: AxiosRequestConfig) {
        return ProjectAssociateApiFp(this.configuration).projectAssociateControllerCreate(createProjectAssociateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAssociateApi
     */
    public projectAssociateControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig) {
        return ProjectAssociateApiFp(this.configuration).projectAssociateControllerFindAll(limit, page, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAssociateApi
     */
    public projectAssociateControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return ProjectAssociateApiFp(this.configuration).projectAssociateControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAssociateApi
     */
    public projectAssociateControllerRemove(id: string, options?: AxiosRequestConfig) {
        return ProjectAssociateApiFp(this.configuration).projectAssociateControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectAssociateDto} updateProjectAssociateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAssociateApi
     */
    public projectAssociateControllerUpdate(id: string, updateProjectAssociateDto: UpdateProjectAssociateDto, options?: AxiosRequestConfig) {
        return ProjectAssociateApiFp(this.configuration).projectAssociateControllerUpdate(id, updateProjectAssociateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectUserApi - axios parameter creator
 * @export
 */
export const ProjectUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectUserDto} createProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerCreate: async (createProjectUserDto: CreateProjectUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectUserDto' is not null or undefined
            assertParamExists('projectUserControllerCreate', 'createProjectUserDto', createProjectUserDto)
            const localVarPath = `/project-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerFindAll: async (limit?: number, page?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectUserControllerFindOne', 'id', id)
            const localVarPath = `/project-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectUserControllerRemove', 'id', id)
            const localVarPath = `/project-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectUserDto} updateProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerUpdate: async (id: string, updateProjectUserDto: UpdateProjectUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectUserControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectUserDto' is not null or undefined
            assertParamExists('projectUserControllerUpdate', 'updateProjectUserDto', updateProjectUserDto)
            const localVarPath = `/project-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectUserApi - functional programming interface
 * @export
 */
export const ProjectUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectUserDto} createProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectUserControllerCreate(createProjectUserDto: CreateProjectUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectUserControllerCreate(createProjectUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectUserControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectUserControllerFindAll(limit, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectUserControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectUserControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectUserControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectUserControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectUserDto} updateProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectUserControllerUpdate(id: string, updateProjectUserDto: UpdateProjectUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectUserControllerUpdate(id, updateProjectUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectUserApi - factory interface
 * @export
 */
export const ProjectUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectUserApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectUserDto} createProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerCreate(createProjectUserDto: CreateProjectUserDto, options?: any): AxiosPromise<ProjectUser> {
            return localVarFp.projectUserControllerCreate(createProjectUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerFindAll(limit?: number, page?: number, query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.projectUserControllerFindAll(limit, page, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerFindOne(id: string, options?: any): AxiosPromise<ProjectUser> {
            return localVarFp.projectUserControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerRemove(id: string, options?: any): AxiosPromise<ProjectUser> {
            return localVarFp.projectUserControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectUserDto} updateProjectUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectUserControllerUpdate(id: string, updateProjectUserDto: UpdateProjectUserDto, options?: any): AxiosPromise<ProjectUser> {
            return localVarFp.projectUserControllerUpdate(id, updateProjectUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectUserApi - object-oriented interface
 * @export
 * @class ProjectUserApi
 * @extends {BaseAPI}
 */
export class ProjectUserApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectUserDto} createProjectUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectUserApi
     */
    public projectUserControllerCreate(createProjectUserDto: CreateProjectUserDto, options?: AxiosRequestConfig) {
        return ProjectUserApiFp(this.configuration).projectUserControllerCreate(createProjectUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectUserApi
     */
    public projectUserControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig) {
        return ProjectUserApiFp(this.configuration).projectUserControllerFindAll(limit, page, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectUserApi
     */
    public projectUserControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return ProjectUserApiFp(this.configuration).projectUserControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectUserApi
     */
    public projectUserControllerRemove(id: string, options?: AxiosRequestConfig) {
        return ProjectUserApiFp(this.configuration).projectUserControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectUserDto} updateProjectUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectUserApi
     */
    public projectUserControllerUpdate(id: string, updateProjectUserDto: UpdateProjectUserDto, options?: AxiosRequestConfig) {
        return ProjectUserApiFp(this.configuration).projectUserControllerUpdate(id, updateProjectUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchoolYearApi - axios parameter creator
 * @export
 */
export const SchoolYearApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerCreate: async (schoolYearDto: SchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolYearDto' is not null or undefined
            assertParamExists('schoolYearControllerCreate', 'schoolYearDto', schoolYearDto)
            const localVarPath = `/school-year`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindAll: async (limit?: number, page?: number, query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/school-year`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schoolYearControllerFindOne', 'id', id)
            const localVarPath = `/school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindOneByStartYear: async (startYear: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startYear' is not null or undefined
            assertParamExists('schoolYearControllerFindOneByStartYear', 'startYear', startYear)
            const localVarPath = `/school-year/startYear/{startYear}`
                .replace(`{${"startYear"}}`, encodeURIComponent(String(startYear)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schoolYearControllerRemove', 'id', id)
            const localVarPath = `/school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerUpdate: async (id: string, schoolYearDto: SchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schoolYearControllerUpdate', 'id', id)
            // verify required parameter 'schoolYearDto' is not null or undefined
            assertParamExists('schoolYearControllerUpdate', 'schoolYearDto', schoolYearDto)
            const localVarPath = `/school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolYearApi - functional programming interface
 * @export
 */
export const SchoolYearApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolYearApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerCreate(schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerCreate(schoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerFindAll(limit, page, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerFindOneByStartYear(startYear: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerFindOneByStartYear(startYear, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolYearControllerUpdate(id: string, schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolYearControllerUpdate(id, schoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchoolYearApi - factory interface
 * @export
 */
export const SchoolYearApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolYearApiFp(configuration)
    return {
        /**
         * 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerCreate(schoolYearDto: SchoolYearDto, options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolYearControllerCreate(schoolYearDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindAll(limit?: number, page?: number, query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.schoolYearControllerFindAll(limit, page, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindOne(id: string, options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolYearControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} startYear 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerFindOneByStartYear(startYear: string, options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolYearControllerFindOneByStartYear(startYear, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerRemove(id: string, options?: any): AxiosPromise<SchoolYear> {
            return localVarFp.schoolYearControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolYearControllerUpdate(id: string, schoolYearDto: SchoolYearDto, options?: any): AxiosPromise<void> {
            return localVarFp.schoolYearControllerUpdate(id, schoolYearDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolYearApi - object-oriented interface
 * @export
 * @class SchoolYearApi
 * @extends {BaseAPI}
 */
export class SchoolYearApi extends BaseAPI {
    /**
     * 
     * @param {SchoolYearDto} schoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerCreate(schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerCreate(schoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerFindAll(limit?: number, page?: number, query?: string, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerFindAll(limit, page, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} startYear 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerFindOneByStartYear(startYear: string, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerFindOneByStartYear(startYear, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerRemove(id: string, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {SchoolYearDto} schoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolYearApi
     */
    public schoolYearControllerUpdate(id: string, schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig) {
        return SchoolYearApiFp(this.configuration).schoolYearControllerUpdate(id, schoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsControllerProjectAssociateStatistics: async (schoolYearId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolYearId' is not null or undefined
            assertParamExists('statisticsControllerProjectAssociateStatistics', 'schoolYearId', schoolYearId)
            const localVarPath = `/Statistics/project-associates/{schoolYearId}`
                .replace(`{${"schoolYearId"}}`, encodeURIComponent(String(schoolYearId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsControllerProjectUsersStatistics: async (schoolYearId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolYearId' is not null or undefined
            assertParamExists('statisticsControllerProjectUsersStatistics', 'schoolYearId', schoolYearId)
            const localVarPath = `/Statistics/project-users/{schoolYearId}`
                .replace(`{${"schoolYearId"}}`, encodeURIComponent(String(schoolYearId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsControllerProjectAssociateStatistics(schoolYearId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsControllerProjectAssociateStatistics(schoolYearId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statisticsControllerProjectUsersStatistics(schoolYearId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statisticsControllerProjectUsersStatistics(schoolYearId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsControllerProjectAssociateStatistics(schoolYearId: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.statisticsControllerProjectAssociateStatistics(schoolYearId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statisticsControllerProjectUsersStatistics(schoolYearId: string, options?: any): AxiosPromise<void> {
            return localVarFp.statisticsControllerProjectUsersStatistics(schoolYearId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
    /**
     * 
     * @param {string} schoolYearId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsControllerProjectAssociateStatistics(schoolYearId: string, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsControllerProjectAssociateStatistics(schoolYearId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolYearId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statisticsControllerProjectUsersStatistics(schoolYearId: string, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statisticsControllerProjectUsersStatistics(schoolYearId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentOnActivityApi - axios parameter creator
 * @export
 */
export const StudentOnActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStudentOnActivityDto} createStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerCreate: async (createStudentOnActivityDto: CreateStudentOnActivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStudentOnActivityDto' is not null or undefined
            assertParamExists('studentOnActivityControllerCreate', 'createStudentOnActivityDto', createStudentOnActivityDto)
            const localVarPath = `/student-on-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStudentOnActivityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [studentOnSchoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerFindAll: async (studentOnSchoolYearId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student-on-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentOnSchoolYearId !== undefined) {
                localVarQueryParameter['studentOnSchoolYearId'] = studentOnSchoolYearId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnActivityControllerFindOne', 'id', id)
            const localVarPath = `/student-on-activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnActivityControllerRemove', 'id', id)
            const localVarPath = `/student-on-activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnActivityDto} updateStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerUpdate: async (id: string, updateStudentOnActivityDto: UpdateStudentOnActivityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnActivityControllerUpdate', 'id', id)
            // verify required parameter 'updateStudentOnActivityDto' is not null or undefined
            assertParamExists('studentOnActivityControllerUpdate', 'updateStudentOnActivityDto', updateStudentOnActivityDto)
            const localVarPath = `/student-on-activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStudentOnActivityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentOnActivityApi - functional programming interface
 * @export
 */
export const StudentOnActivityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentOnActivityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStudentOnActivityDto} createStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnActivityControllerCreate(createStudentOnActivityDto: CreateStudentOnActivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnActivityControllerCreate(createStudentOnActivityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [studentOnSchoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnActivityControllerFindAll(studentOnSchoolYearId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentOnActivity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnActivityControllerFindAll(studentOnSchoolYearId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnActivityControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnActivityControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnActivityControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnActivityControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnActivityDto} updateStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnActivityControllerUpdate(id: string, updateStudentOnActivityDto: UpdateStudentOnActivityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnActivityControllerUpdate(id, updateStudentOnActivityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentOnActivityApi - factory interface
 * @export
 */
export const StudentOnActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentOnActivityApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateStudentOnActivityDto} createStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerCreate(createStudentOnActivityDto: CreateStudentOnActivityDto, options?: any): AxiosPromise<object> {
            return localVarFp.studentOnActivityControllerCreate(createStudentOnActivityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [studentOnSchoolYearId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerFindAll(studentOnSchoolYearId?: number, options?: any): AxiosPromise<Array<StudentOnActivity>> {
            return localVarFp.studentOnActivityControllerFindAll(studentOnSchoolYearId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerFindOne(id: string, options?: any): AxiosPromise<StudentOnActivity> {
            return localVarFp.studentOnActivityControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerRemove(id: string, options?: any): AxiosPromise<StudentOnActivity> {
            return localVarFp.studentOnActivityControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnActivityDto} updateStudentOnActivityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnActivityControllerUpdate(id: string, updateStudentOnActivityDto: UpdateStudentOnActivityDto, options?: any): AxiosPromise<StudentOnActivity> {
            return localVarFp.studentOnActivityControllerUpdate(id, updateStudentOnActivityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentOnActivityApi - object-oriented interface
 * @export
 * @class StudentOnActivityApi
 * @extends {BaseAPI}
 */
export class StudentOnActivityApi extends BaseAPI {
    /**
     * 
     * @param {CreateStudentOnActivityDto} createStudentOnActivityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnActivityApi
     */
    public studentOnActivityControllerCreate(createStudentOnActivityDto: CreateStudentOnActivityDto, options?: AxiosRequestConfig) {
        return StudentOnActivityApiFp(this.configuration).studentOnActivityControllerCreate(createStudentOnActivityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [studentOnSchoolYearId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnActivityApi
     */
    public studentOnActivityControllerFindAll(studentOnSchoolYearId?: number, options?: AxiosRequestConfig) {
        return StudentOnActivityApiFp(this.configuration).studentOnActivityControllerFindAll(studentOnSchoolYearId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnActivityApi
     */
    public studentOnActivityControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return StudentOnActivityApiFp(this.configuration).studentOnActivityControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnActivityApi
     */
    public studentOnActivityControllerRemove(id: string, options?: AxiosRequestConfig) {
        return StudentOnActivityApiFp(this.configuration).studentOnActivityControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateStudentOnActivityDto} updateStudentOnActivityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnActivityApi
     */
    public studentOnActivityControllerUpdate(id: string, updateStudentOnActivityDto: UpdateStudentOnActivityDto, options?: AxiosRequestConfig) {
        return StudentOnActivityApiFp(this.configuration).studentOnActivityControllerUpdate(id, updateStudentOnActivityDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentOnSchoolYearApi - axios parameter creator
 * @export
 */
export const StudentOnSchoolYearApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStudentOnSchoolYearDto} createStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerCreate: async (createStudentOnSchoolYearDto: CreateStudentOnSchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStudentOnSchoolYearDto' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerCreate', 'createStudentOnSchoolYearDto', createStudentOnSchoolYearDto)
            const localVarPath = `/student-on-school-year`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStudentOnSchoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [schoolYearId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindAll: async (schoolYearId?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student-on-school-year`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (schoolYearId !== undefined) {
                localVarQueryParameter['schoolYearId'] = schoolYearId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerFindOne', 'id', id)
            const localVarPath = `/student-on-school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {string} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {'active' | 'inactive' | 'pending'} [status] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindUsersBySchoolYear: async (schoolYearId: string, sortBy?: string, limit?: number, page?: number, status?: 'active' | 'inactive' | 'pending', query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolYearId' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerFindUsersBySchoolYear', 'schoolYearId', schoolYearId)
            const localVarPath = `/student-on-school-year/users/{schoolYearId}`
                .replace(`{${"schoolYearId"}}`, encodeURIComponent(String(schoolYearId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerRemove', 'id', id)
            const localVarPath = `/student-on-school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnSchoolYearDto} updateStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerUpdate: async (id: string, updateStudentOnSchoolYearDto: UpdateStudentOnSchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerUpdate', 'id', id)
            // verify required parameter 'updateStudentOnSchoolYearDto' is not null or undefined
            assertParamExists('studentOnSchoolYearControllerUpdate', 'updateStudentOnSchoolYearDto', updateStudentOnSchoolYearDto)
            const localVarPath = `/student-on-school-year/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStudentOnSchoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentOnSchoolYearApi - functional programming interface
 * @export
 */
export const StudentOnSchoolYearApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentOnSchoolYearApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStudentOnSchoolYearDto} createStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto: CreateStudentOnSchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [schoolYearId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerFindAll(schoolYearId?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerFindAll(schoolYearId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnSchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {string} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {'active' | 'inactive' | 'pending'} [status] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId: string, sortBy?: string, limit?: number, page?: number, status?: 'active' | 'inactive' | 'pending', query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId, sortBy, limit, page, status, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnSchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnSchoolYearDto} updateStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentOnSchoolYearControllerUpdate(id: string, updateStudentOnSchoolYearDto: UpdateStudentOnSchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentOnSchoolYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentOnSchoolYearControllerUpdate(id, updateStudentOnSchoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentOnSchoolYearApi - factory interface
 * @export
 */
export const StudentOnSchoolYearApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentOnSchoolYearApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateStudentOnSchoolYearDto} createStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto: CreateStudentOnSchoolYearDto, options?: any): AxiosPromise<object> {
            return localVarFp.studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [schoolYearId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindAll(schoolYearId?: number, userId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.studentOnSchoolYearControllerFindAll(schoolYearId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindOne(id: string, options?: any): AxiosPromise<StudentOnSchoolYear> {
            return localVarFp.studentOnSchoolYearControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolYearId 
         * @param {string} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {'active' | 'inactive' | 'pending'} [status] 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId: string, sortBy?: string, limit?: number, page?: number, status?: 'active' | 'inactive' | 'pending', query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId, sortBy, limit, page, status, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerRemove(id: string, options?: any): AxiosPromise<StudentOnSchoolYear> {
            return localVarFp.studentOnSchoolYearControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStudentOnSchoolYearDto} updateStudentOnSchoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentOnSchoolYearControllerUpdate(id: string, updateStudentOnSchoolYearDto: UpdateStudentOnSchoolYearDto, options?: any): AxiosPromise<StudentOnSchoolYear> {
            return localVarFp.studentOnSchoolYearControllerUpdate(id, updateStudentOnSchoolYearDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentOnSchoolYearApi - object-oriented interface
 * @export
 * @class StudentOnSchoolYearApi
 * @extends {BaseAPI}
 */
export class StudentOnSchoolYearApi extends BaseAPI {
    /**
     * 
     * @param {CreateStudentOnSchoolYearDto} createStudentOnSchoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto: CreateStudentOnSchoolYearDto, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerCreate(createStudentOnSchoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [schoolYearId] 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerFindAll(schoolYearId?: number, userId?: number, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerFindAll(schoolYearId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolYearId 
     * @param {string} [sortBy] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {'active' | 'inactive' | 'pending'} [status] 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId: string, sortBy?: string, limit?: number, page?: number, status?: 'active' | 'inactive' | 'pending', query?: string, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerFindUsersBySchoolYear(schoolYearId, sortBy, limit, page, status, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerRemove(id: string, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateStudentOnSchoolYearDto} updateStudentOnSchoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentOnSchoolYearApi
     */
    public studentOnSchoolYearControllerUpdate(id: string, updateStudentOnSchoolYearDto: UpdateStudentOnSchoolYearDto, options?: AxiosRequestConfig) {
        return StudentOnSchoolYearApiFp(this.configuration).studentOnSchoolYearControllerUpdate(id, updateStudentOnSchoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<User> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.usersControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerMe(options?: any): AxiosPromise<User> {
            return localVarFp.usersControllerMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetAll(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerMe(options).then((request) => request(this.axios, this.basePath));
    }
}


